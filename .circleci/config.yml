version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.0.3
  aws-ecr: circleci/aws-ecr@6.15.3
  kubernetes: circleci/kubernetes@0.11.2
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "DESTROY STACKS"
            echo "Destroyed ?????"

jobs:
#----------- Job 1 ----------------
  linting:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: checking paths
          command: |
            echo 'path is:' ${pwd}
            echo 'the path is:'
            pwd
            ls -la
            ls -la ~/project/.circleci/dockerstuff

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "~/project/.circleci/dockerstuff/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            cd ~/project/.circleci/dockerstuff
            python3 -m venv venv
            ls -l venv
            ls -l venv/bin
            . venv/bin/activate
            apt-get -y install make
            make --version
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              chmod +x /bin/hadolint

      - save_cache:
            paths:
              - ./venv
            key: v1-dependencies-{{ checksum "~/project/.circleci/dockerstuff/requirements.txt" }}

      # run lint!
      - run:
          name: Run lint
          command: |
            cd ~/project/.circleci/dockerstuff
            . venv/bin/activate
            make install
            make lint
      - slack/notify:
          event: fail
          template: basic_fail_1

#--------------- Job 2 ------------------

  create-infrastructure:
    docker:
      - image: amazon/aws-cli

    steps:
      - checkout

      - run: yum -y install tar gzip jq npm
      - run: yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm jq

      - run:
          name: Ensure server infrastructure exists
          command: |
            pwd
            aws cloudformation deploy \
            --template-file .circleci/files/server.yml \
            --tags Name=uda-capstone \
            --stack-name "server-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --region=us-east-1

      - run:
          name: Add server ip to ansible inventory files
          command: |
            cd ~/project/.circleci/ansible/
            ls -la

            SERVER_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=server-${CIRCLE_WORKFLOW_ID:0:7}" --region=us-east-1 --output text)

            echo $SERVER_IP >> inventory.txt
            cat inventory.txt

            curl -H "Content-Type: text/plain" -H "token: ab-${CIRCLE_WORKFLOW_ID}" --request PUT --data "$SERVER_IP" https://api.memstash.io/values/serverip

      #Store
      - run:
          name: Store server ID
          command: |

            echo $SERVER_IP

            curl -H "token: ab-${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/serverip

            cat ~/project/.circleci/ansible/inventory.txt

      - destroy-environment

#------------------------------------------

  deploy-minikube-and-kubectl:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a3:27:68:1c:b4:68:20:dd:2a:d7:5e:79:3d:06:77:46"]

      - attach_workspace:
          at: ~/project/

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add curl
            pip install awscli

      - run:
          name: Deploy minikube
          command: |
            cd ~/project/.circleci/ansible
            ls -la

            SERVERIP=$(curl -H "token: ab-${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/serverip)
            echo "the id is: " $SERVERIP
            echo $SERVERIP >> inventory.txt

            ansible-playbook -i inventory.txt deploy-server.yml

      - slack/notify:
          event: fail
          template: basic_fail_1

      # Here's where you will add some code to rollback on failure
      - destroy-environment

#---------------------- Job ??--------------


workflows:
  default:
    jobs:
      - linting
      #- create-docker
      #- create-server
      #- run-app
