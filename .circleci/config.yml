version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.0.3
  aws-ecr: circleci/aws-ecr@6.15.3
  kubernetes: circleci/kubernetes@0.11.2

jobs:
  eksctl-install:
    #executor: aws-eks/python3
    machine: true

    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a3:27:68:1c:b4:68:20:dd:2a:d7:5e:79:3d:06:77:46"]
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            echo "eksctl version: " $(sudo eksctl version)
      - run:
          name: install kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            kubectl version --short --client
      - run:
          name: create cluster
          command: |
            pwd
            #ls -la ~/project/k8s
            cd ~/project/eks
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set role_arn $ROLE_ARN --profile circleci

            eksctl create cluster --name capstone --version 1.16 --nodegroup-name standard-workers --node-type t2.micro --nodes 3 --nodes-min 1 --nodes-max 4 --node-ami auto --region us-east-1 --zones us-east-1a,us-east-1b,us-east-1c
      - run:
          name: delete cluster
          command: |
            #sudo eksctl delete cluster --name capstone --region us-east-1
            echo

            kubectl get services

  check-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Kluster info
          command: |
            kubectl get services
            #aws eks update-kubeconfig --name capstone --region us-east-1
            kubectl get nodes

  deploy-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      docker-image-name:
        description: |
          Name of the docker image to be deployed
        type: string
      aws-region:
        description: |
          AWS region
        type: string
      account-url:
        description: |
          Docker AWS ECR repository url
        type: string
      tag:
        description: |
          Docker image tag
        type: string
    steps:
      - checkout
      - run:
          name: Replace placeholders with values in deployment template
          command: |
            pwd
            cat k8s/deployment.tpl |\
            sed "s|DOCKER_IMAGE_NAME|<< parameters.docker-image-name >>|" |\
            sed "s|DOCKER_REPO_NAME|<< parameters.account-url >>|" |\
            sed "s|DOCKER_IMAGE_TAG|<< parameters.tag >>|" > k8s/deployment.yml; \
            cat k8s/namespace.yml
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          action-type: apply
          resource-file-path: "k8s/namespace.yml"
          show-kubectl-command: true
          namespace: capstone
      - kubernetes/create-or-update-resource:
          action-type: apply
          resource-file-path: "k8s/deployment.tpl"
          show-kubectl-command: true
          get-rollout-status: true
          resource-name: deployment/capstone
          namespace: capstone
      - kubernetes/create-or-update-resource:
          action-type: apply
          resource-file-path: "k8s/service.yml"
          show-kubectl-command: true
          namespace: capstone
  test-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
      expected-version-info:
        description: |
          Expected app version (this is used for testing that the
          correct version has been deployed)
        type: string
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - run:
          name: Wait for service to be ready
          command: |
            kubectl get pods
            kubectl get services
            sleep 30
            for attempt in {1..20}; do
              EXTERNAL_IP=$(kubectl get service demoapp | awk '{print $4}' | tail -n1)
              echo "Checking external IP: ${EXTERNAL_IP}"
              if [ -n "${EXTERNAL_IP}" ] && [ -z $(echo "${EXTERNAL_IP}" | grep "pending") ]; then
                break
              fi
              echo "Waiting for external IP to be ready: ${EXTERNAL_IP}"
              sleep 10
            done
            sleep 180
            curl -s --retry 10 "http://$EXTERNAL_IP" | grep "<< parameters.expected-version-info >>"

workflows:
  main:
    jobs:
      #- eksctl-install
      - check-cluster:
          cluster-name: capstone
          #requires:
          #  - eksctl-install
      - aws-ecr/build-and-push-image:
          #name: build-and-push-image
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_DEFAULT_REGION
          repo: capstone
          dockerfile: Dockerfile
          path: .circleci/dockerstuff
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          tag: ${CIRCLE_SHA1}
          requires:
            - check-cluster
      - deploy-application:
          cluster-name: capstone
          aws-region: $AWS_DEFAULT_REGION
          account-url: ${AWS_ECR_ACCOUNT_URL}
          docker-image-name: "${AWS_ECR_URL}/capstone:${CIRCLE_SHA1}"
          tag: ${CIRCLE_SHA1}
          requires:
            - aws-ecr/build-and-push-image
      - test-application:
          name: test-application
          cluster-name: capstone
          aws-region: $AWS_DEFAULT_REGION
          expected-version-info: "${CIRCLE_SHA1}"
          requires:
            - deploy-application
