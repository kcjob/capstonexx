version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.0.3
  aws-ecr: circleci/aws-ecr@6.15.3
  kubernetes: circleci/kubernetes@0.11.2
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "DESTROY STACKS"
            echo "Destroyed ?????"

jobs:
#----------- Job 1 ----------------
  linting:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: checking paths
          command: |
            echo 'path is:' ${pwd}
            echo 'the path is:'
            pwd
            ls -la
            ls -la ~/project/.circleci/dockerstuff

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "~/project/.circleci/dockerstuff/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            cd ~/project/.circleci/dockerstuff
            python3 -m venv venv
            ls -l venv
            ls -l venv/bin
            . venv/bin/activate
            apt-get -y install make
            make --version
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              chmod +x /bin/hadolint

      - save_cache:
            paths:
              - ./venv
            key: v1-dependencies-{{ checksum "~/project/.circleci/dockerstuff/requirements.txt" }}

      # run lint!
      - run:
          name: Run lint
          command: |
            cd ~/project/.circleci/dockerstuff
            . venv/bin/activate
            make install
            make lint
      - slack/notify:
          event: fail
          template: basic_fail_1

#--------------- Job 2 ------------------

  check-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Kluster info
          command: |
            kubectl get services
            #aws eks update-kubeconfig --name capstone --region us-east-1
            kubectl get nodes
      - slack/notify:
          event: fail
          template: basic_fail_1

      # Here's where you will add some code to rollback on failure
      - destroy-environment

#---------------------- Job ??--------------


workflows:
  default:
    jobs:
      - linting
      #- eksctl-install
         #requires:
         #  - eskctl-install   
      - check-cluster
          requires:
            - linting
         #   - eskctl-install

